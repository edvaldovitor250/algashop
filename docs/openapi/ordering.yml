openapi: 3.0.4

info: 
  title: AlgaShop - Ordering
  version: "1.0"

servers:
  - description: Development
    url: "http://localhost:8080"
  - description: Production
    url: "https://api.algashop.com"

paths:
  /api/v1/customers:
    post:
      description: Register new customer
      tags: 
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerInput"
      responses:
        201:
          description: Customer created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
          headers:
            Location:
              schema:
                type: string
              description: Resource address
              example: "/api/v1/customers/6e148bd5-47f6-4022-b9da-07cfaa294f7a"
        400:
          $ref: "#/components/responses/BadRequest"
        409: 
          $ref: "#/components/responses/Conflict"
        422:
          $ref: "#/components/responses/UnprocessableEntity"
        500:
          $ref: "#/components/responses/InternalError"
    get: 
      description: List customers
      tags:
        - Customers
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/Page"
                - type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
  /api/v1/customers/{customerId}:
    get:
      parameters:
        - schema:
            type: string
          name: customerId
          in: path
          required: true
          example: '6e148bd5-47f6-4022-b9da-07cfaa294f7a'
      description: Get one customer by id
      tags:
        - Customers
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        404:
          $ref: "#/components/responses/NotFound"
    put: 
      parameters:
        - schema:
            type: string
          name: customerId
          in: path
          required: true
          example: '6e148bd5-47f6-4022-b9da-07cfaa294f7a'
      description: Edit customer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerUpdateInput"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        409: 
          $ref: "#/components/responses/Conflict"
        422:
          $ref: "#/components/responses/UnprocessableEntity"
        500:
          $ref: "#/components/responses/InternalError"
    delete: 
      parameters:
        - schema:
            type: string
          name: customerId
          in: path
          required: true
          example: '6e148bd5-47f6-4022-b9da-07cfaa294f7a'
      description: Delete customer
      tags:
        - Customers
      responses:
        204:
          description: No content
        404:
          $ref: "#/components/responses/NotFound"

components:
  responses:
    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    BadRequest:
      description: Invalid request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    Conflict:
      description: Conflict resource
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    InternalError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ProblemDetail"
  schemas:
    Customer:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - document
        - phone
        - birthDate
        - loyaltyPoints
        - registeredAt
        - archivedAt
        - promotionNotificationsAllowed
        - archived
        - address
      properties:
        id: 
          type: string
          example: "380d7e70-7942-4b8d-a0e9-b93d79aa6745"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "johndoe@email.com"
        document:
          type: string
          example: "12345"
        phone:
          type: string
          example: "1191234564"
        birthDate:
          type: string
          format: date
          example: "1991-07-05"
        loyaltyPoints:
          type: number
          example: 10
        registeredAt:
          type: string
          format: date-time
          example: "2024-04-04T00:12:45Z"
        archivedAt:
          type: string
          format: date-time
          example: "2024-04-04T00:12:45Z"
        promotionNotificationsAllowed:
          type: boolean
          example: false
        archived:
          type: boolean
          example: false
        address:
          $ref: "#/components/schemas/Address"
    Address:
      type: object
      required:
        - street
        - number
        - complement
        - neighborhood
        - city
        - state
        - zipCode
      properties:
        street:
          type: string
          example: "Bourbon Street"
          nullable: false
          x-validation: "notBlank"
        number:
          type: string
          example: "2000"
          nullable: false
          x-validation: "notBlank"
        complement:
          type: string
          example: "apt 122"
          nullable: true
        neighborhood:
          type: string
          example: "North Ville"
          nullable: false
          x-validation: "notBlank"
        city:
          type: string
          example: "Yostfort"
          nullable: false
          x-validation: "notBlank"
        state:
          type: string
          example: "South Carolina"
          nullable: false
          x-validation: "notBlank"
        zipCode:
          type: string
          example: "12321"
          nullable: false
          x-validation: "notBlank"
    CustomerInput:
      type: object
      required:
        - firstName
        - lastName
        - email
        - document
        - phone
        - birthDate
        - promotionNotificationsAllowed
        - address
      properties:
        firstName:
          type: string
          example: "John"
          nullable: false
          x-validation: "notBlank"
        lastName:
          type: string
          example: "Doe"
          nullable: false
          x-validation: "notBlank"
        email:
          type: string
          example: "johndoe@email.com"
          nullable: false
          x-validation: ["email", "notBlank"]
        document:
          type: string
          example: "12345"
          nullable: false
          x-validation: "notBlank"
        phone:
          type: string
          example: "1191234564"
          nullable: false
          x-validation: "notBlank"
        birthDate:
          type: string
          format: date
          example: "1991-07-05"
          nullable: false
          x-validation: "pastDate"
        promotionNotificationsAllowed:
          type: boolean
          example: false
          nullable: false
        address:
          $ref: "#/components/schemas/Address"
    CustomerUpdateInput:
      type: object
      required:
        - firstName
        - lastName
        - phone
        - promotionNotificationsAllowed
        - address
      properties:
        firstName:
          type: string
          example: "John"
          nullable: false
          x-validation: "notBlank"
        lastName:
          type: string
          example: "Doe"
          nullable: false
          x-validation: "notBlank"
        phone:
          type: string
          example: "1191234564"
          nullable: false
          x-validation: "notBlank"
        promotionNotificationsAllowed:
          type: boolean
          example: false
          nullable: false
        address:
          $ref: "#/components/schemas/Address"
    ProblemDetail:
      type: object
      required:
        - status
        - type
      properties:
        status:
          type: integer
          example: 400
        type:
          type: string
          example: "/errors/invalid-data"
        title:
          type: string
          example: Invalid fields
        instance:
          type: string
          example: /"api/v1/customers"
        detail:
          type: string
          example: One or more fields are invalid
        fields:
          type: object
          description: Fields that caused the error
    Page:
      type: object
      required:
        - number
        - size
        - totalPages
        - totalElements
        - content
      properties:
        number:
          type: integer
          example: 2
        size:
          type: integer
          example: 9
        totalPages:
          type: integer
          example: 15
        totalElements:
          type: integer
          example: 150